--CLEAN-UP ALLOWS TO RERUN THE SCRIPT
DROP TABLE USERS_TWEETS_ATTRIBUTES;

-- CREATE THE TABLE WITH COLS EXTRACTED FOR FURTHER PROCESSING
-- USE THE RECORD'S CREATED TIMESTAMP TO ONLY LOOK FOR A DAY'S WORTH OF TWEETS
CREATE TABLE USERS_TWEETS_ATTRIBUTES AS
SELECT USER.ID_STR AS USER_ID, ID_STR AS TWEET_ID,
CURRENT_TIMESTAMP AS CREATED_TS
USER.CREATED_AT AS USER_CREATED_TS,
CREATED_AT AS TWEET_CREATED_TS,
USER.SCREEN_NAME, USER.NAME,
USER.FOLLOWERS_COUNT AS NUMBER_OF_FOLLOWING,
USER.FRIENDS_COUNT AS NUMBER_OF_FOLLOWERS,
USER.STATUSES_COUNT AS NUMBER_OF_TWEETS,
RETWEETED, RETWEET_COUNT,
COUNT(ENTITIES.URLS) AS NUMBER_OF_URLS,
COUNT(ENTITIES.USER_MENTIONS) AS NUMBER_OF_MENTIONS,
COUNT(ENTITIES.HASHTAGS) AS NUMBER_OF_HASTAGS,
USER.URL AS USER_PROFILE_URL,
ENTITIES.URLS AS TWEETED_URLS
FROM TWEETS WHERE USER.VERIFIED <> TRUE AND RETWEETED_STATUS IS NULL
AND DAY(CREATED_TS)-DAY(CURRENT_DATE) = 0
GROUP BY USER.ID_STR, USER.CREATED_AT, USER.URL, USER.NAME, USER.SCREEN_NAME, 
USER.FOLLOWERS_COUNT, USER.FRIENDS_COUNT, USER.STATUSES_COUNT, ENTITIES.URLS,
RETWEETED, RETWEET_COUNT;

-- CREATE A USER-URL DUMP TABLE (DENORMALIZED) FOR REPORTING PURPOSES
CREATE TABLE SPAM_USERS_URLS
(USER_ID STRING,
TWEET_ID STRING,
CREATED_TS CURRENT_TIMESTAMP,
TWEET_CREATED_TS STRING,
URL_IN_TWEET STRING
)
STORED AS TEXTFILE
LOCATION '/user/flume/tweets/SPAM_USERS_URLS';

-- CHECK IF THE TABLE WAS CREATED SUCCESSFULLY WITH THE CORRECT SCHEMA
DESCRIBE USERS_TWEETS_ATTRIBUTES;

-- CHECK IF THE DATA IN THE TABLE LOOKS MEANINGFUL
SELECT * FROM USERS_TWEETS_ATTRIBUTES LIMIT 10;

   